package GUI;

import Exceptions.NoMovieSelectedException;
import API.API;
import Database.Database;
import Files.FilesList;
import Files.ImagesUtils;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import main.Movie;
import main.MovieCollection;

public class Frame extends javax.swing.JFrame {

        static final String TITLE = "Movie-Manager";
        Theme theme;

        static String dir = "C:\\";
        MovieCollection movies;
        EditFrame ef = new EditFrame();
        SettingsFrame sf;
        boolean sorted = false;
        static FilesList fl;
        static final int CELL_HEIGHT = 40;

        public Frame() {
                this.movies = new MovieCollection();
                //Frame setup
                initComponents();
                this.getRootPane().requestFocus();
                this.theme = GUIMethods.setupFrame(this, new Dimension(1280, 780), TITLE); //Sets theme, font, LookAndFeel, size, title and centers the frame

                //Components setup
                moviesList.setFixedCellHeight(CELL_HEIGHT);
                moviesList.setFocusable(false);

                try {
                        Frame.dir = (String) Database.db().SELECT("Settings", "Directory").get(0);
                } catch (SQLException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                fl = new FilesList(dir);

                SearchBar.addFocusListener(new FocusListener() {
                        @Override
                        public void focusGained(FocusEvent e) {
                                if (SearchBar.getText().equals("Search")) {
                                        SearchBar.setText("");
                                        SearchBar.setForeground(theme.getTextBoxForeground());
                                }
                        }

                        @Override
                        public void focusLost(FocusEvent e) {
                                if (SearchBar.getText().isEmpty()) {
                                        SearchBar.setForeground(theme.getTextBoxForeground());
                                        SearchBar.setText("Search");
                                }
                        }
                });

                logoLabel.setIcon(new ImageIcon(System.getProperty("user.dir").replaceAll(Pattern.quote("\\"), "/") + "/assets/ww-logo-png-100-empty.png"));
        }

        /**
         * This method is called from within the
         * constructor to initialize the form.
         * WARNING: Do NOT modify this code. The
         * content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                files = new javax.swing.JInternalFrame();
                jFileChooser1 = new javax.swing.JFileChooser();
                dialog = new javax.swing.JDialog();
                listTabPane = new javax.swing.JTabbedPane();
                Movies = new javax.swing.JScrollPane();
                moviesList = new javax.swing.JList<>();
                infoTabPane = new javax.swing.JTabbedPane();
                info1Background = new javax.swing.JPanel();
                image = new javax.swing.JPanel();
                imageLabel = new javax.swing.JLabel();
                infoPanel = new RoundedPanel();
                title = new javax.swing.JLabel();
                year = new javax.swing.JLabel();
                titleIndicator = new javax.swing.JLabel();
                yearIndicator = new javax.swing.JLabel();
                ratedIndicator = new javax.swing.JLabel();
                rated = new javax.swing.JLabel();
                runtimeIndicator = new javax.swing.JLabel();
                runtime = new javax.swing.JLabel();
                directorIndicator = new javax.swing.JLabel();
                director = new javax.swing.JLabel();
                writersIndicator = new javax.swing.JLabel();
                writers = new javax.swing.JLabel();
                actorsIndicator = new javax.swing.JLabel();
                actors = new javax.swing.JLabel();
                languageIndicator = new javax.swing.JLabel();
                genre = new javax.swing.JLabel();
                countryIndicator = new javax.swing.JLabel();
                language = new javax.swing.JLabel();
                awardsIndicator = new javax.swing.JLabel();
                country = new javax.swing.JLabel();
                imdbratingIndicator = new javax.swing.JLabel();
                awards = new javax.swing.JLabel();
                imdbidIndicator = new javax.swing.JLabel();
                imdbrating = new javax.swing.JLabel();
                plotIndicator = new javax.swing.JLabel();
                plot = new javax.swing.JLabel();
                genreIndicator = new javax.swing.JLabel();
                imdbid = new javax.swing.JLabel();
                tmdbLogo = new javax.swing.JLabel();
                playButton = new GUI.RoundedPanel();
                buttonLabel = new javax.swing.JLabel();
                toolbarPanel = new javax.swing.JPanel();
                logo = new javax.swing.JPanel();
                logoLabel = new javax.swing.JLabel();
                SearchBar = new javax.swing.JTextField();
                settingsButton = new GUI.RoundedPanel();
                buttonLabel1 = new javax.swing.JLabel();
                editButton = new GUI.RoundedPanel();
                buttonLabel2 = new javax.swing.JLabel();
                sortButton = new GUI.RoundedPanel();
                sortLabel = new javax.swing.JLabel();
                scrapeButton = new GUI.RoundedPanel();
                sortLabel1 = new javax.swing.JLabel();
                refreshButton = new GUI.RoundedPanel();
                refreshLabel = new javax.swing.JLabel();

                files.setVisible(true);

                javax.swing.GroupLayout filesLayout = new javax.swing.GroupLayout(files.getContentPane());
                files.getContentPane().setLayout(filesLayout);
                filesLayout.setHorizontalGroup(
                        filesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                );
                filesLayout.setVerticalGroup(
                        filesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                );

                dialog.setBounds(new java.awt.Rectangle(0, 0, 600, 600));

                javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
                dialog.getContentPane().setLayout(dialogLayout);
                dialogLayout.setHorizontalGroup(
                        dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
                );
                dialogLayout.setVerticalGroup(
                        dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
                );

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                listTabPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
                listTabPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                listTabPane.setName("tabpane"); // NOI18N

                moviesList.setBackground(new java.awt.Color(55, 63, 81));
                moviesList.setForeground(new java.awt.Color(255, 255, 255));
                moviesList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                moviesList.setDropMode(javax.swing.DropMode.ON);
                moviesList.setInheritsPopupMenu(true);
                moviesList.setName("list"); // NOI18N
                moviesList.setSelectionBackground(new java.awt.Color(33, 38, 42));
                moviesList.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                moviesListMouseClicked(evt);
                        }
                });
                Movies.setViewportView(moviesList);

                listTabPane.addTab("Movies", Movies);

                infoTabPane.setName("tabpane"); // NOI18N

                info1Background.setName("background"); // NOI18N

                image.setBackground(new java.awt.Color(255, 255, 255));
                image.setName("background"); // NOI18N
                image.setPreferredSize(new java.awt.Dimension(300, 411));

                imageLabel.setMaximumSize(new java.awt.Dimension(229, 338));
                imageLabel.setPreferredSize(new java.awt.Dimension(300, 411));

                javax.swing.GroupLayout imageLayout = new javax.swing.GroupLayout(image);
                image.setLayout(imageLayout);
                imageLayout.setHorizontalGroup(
                        imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                );
                imageLayout.setVerticalGroup(
                        imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                );

                infoPanel.setBackground(new java.awt.Color(255, 255, 255));
                infoPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
                infoPanel.setName("background2"); // NOI18N

                title.setName("label"); // NOI18N

                year.setName("label"); // NOI18N

                titleIndicator.setText("Title:");
                titleIndicator.setName("label"); // NOI18N
                titleIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                yearIndicator.setText("Year:");
                yearIndicator.setName("label"); // NOI18N
                yearIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                ratedIndicator.setText("Rated:");
                ratedIndicator.setName("label"); // NOI18N
                ratedIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                rated.setName("label"); // NOI18N

                runtimeIndicator.setText("Runtime:");
                runtimeIndicator.setName("label"); // NOI18N
                runtimeIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                runtime.setName("label"); // NOI18N

                directorIndicator.setText("Director:");
                directorIndicator.setName("label"); // NOI18N
                directorIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                director.setBackground(java.awt.Color.white);
                director.setName("label"); // NOI18N

                writersIndicator.setText("Writers:");
                writersIndicator.setName("label"); // NOI18N
                writersIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                writers.setName("label"); // NOI18N

                actorsIndicator.setText("Actors:");
                actorsIndicator.setName("label"); // NOI18N
                actorsIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                actors.setName("label"); // NOI18N

                languageIndicator.setText("Language:");
                languageIndicator.setName("label"); // NOI18N
                languageIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                genre.setName("label"); // NOI18N

                countryIndicator.setText("Country:");
                countryIndicator.setName("label"); // NOI18N
                countryIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                language.setName("label"); // NOI18N

                awardsIndicator.setText("Awards:");
                awardsIndicator.setName("label"); // NOI18N
                awardsIndicator.setPreferredSize(new java.awt.Dimension(70, 16));

                country.setName("label"); // NOI18N

                imdbratingIndicator.setText("IMDb Rating:");
                imdbratingIndicator.setName("label"); // NOI18N

                awards.setName("label"); // NOI18N

                imdbidIndicator.setText("IMDb ID:");
                imdbidIndicator.setName("label"); // NOI18N

                imdbrating.setName("label"); // NOI18N

                plotIndicator.setText("Plot:");
                plotIndicator.setName("label"); // NOI18N

                plot.setName("label"); // NOI18N

                genreIndicator.setText("Genre:");
                genreIndicator.setName("label"); // NOI18N

                imdbid.setName("label"); // NOI18N

                tmdbLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                String IMGPATH = System.getProperty("user.dir").replaceAll(Pattern.quote("\\"), "/") + "/assets/tmdbLogo.png";
                        tmdbLogo.setIcon(new javax.swing.ImageIcon(IMGPATH));

                        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
                        infoPanel.setLayout(infoPanelLayout);
                        infoPanelLayout.setHorizontalGroup(
                                infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                                        .addGap(12, 12, 12)
                                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                        .addComponent(ratedIndicator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(runtimeIndicator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(directorIndicator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                        .addComponent(titleIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(yearIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                        .addComponent(actorsIndicator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(writersIndicator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                                        .addContainerGap()
                                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(countryIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(languageIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(genreIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                        .addContainerGap()
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(awardsIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                                        .addComponent(imdbratingIndicator)
                                                                        .addGap(0, 0, Short.MAX_VALUE)))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(year, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rated, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(runtime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(director, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                                .addComponent(writers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(actors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                                .addComponent(genre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(language, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(country, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(awards, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                                .addComponent(imdbrating, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)))
                                .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                        .addComponent(imdbidIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(imdbid, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                        .addComponent(plotIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                        .addComponent(plot, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                                        .addComponent(tmdbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap())
                        );

                        infoPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {actors, awards, country, director, genre, imdbrating, language, rated, runtime, title, writers, year});

                        infoPanelLayout.setVerticalGroup(
                                infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(infoPanelLayout.createSequentialGroup()
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(titleIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(yearIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(year, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(ratedIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(rated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(runtime, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(runtimeIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(directorIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(director, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(writersIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(writers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(actorsIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(actors, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(genre, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(genreIndicator))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(language, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(languageIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(country, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(countryIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(awards, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(awardsIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(imdbrating, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(imdbratingIndicator))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(imdbidIndicator)
                                                .addComponent(imdbid, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addComponent(plotIndicator)
                                        .addGap(0, 0, 0)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(plot, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tmdbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap())
                        );

                        infoPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {actors, awards, country, director, genre, imdbrating, language, rated, runtime, title, writers, year});

                        playButton.setBackground(new java.awt.Color(55, 63, 81));
                        playButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        playButton.setName("button"); // NOI18N
                        playButton.setPreferredSize(new java.awt.Dimension(75, 25));
                        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        playButtonMouseClicked(evt);
                                }
                                public void mouseEntered(java.awt.event.MouseEvent evt) {
                                        playButtonMouseEntered(evt);
                                }
                                public void mouseExited(java.awt.event.MouseEvent evt) {
                                        playButtonMouseExited(evt);
                                }
                        });

                        buttonLabel.setForeground(java.awt.Color.white);
                        buttonLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        buttonLabel.setText("Play");
                        buttonLabel.setName("buttonLabel"); // NOI18N

                        javax.swing.GroupLayout playButtonLayout = new javax.swing.GroupLayout(playButton);
                        playButton.setLayout(playButtonLayout);
                        playButtonLayout.setHorizontalGroup(
                                playButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        );
                        playButtonLayout.setVerticalGroup(
                                playButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        );

                        javax.swing.GroupLayout info1BackgroundLayout = new javax.swing.GroupLayout(info1Background);
                        info1Background.setLayout(info1BackgroundLayout);
                        info1BackgroundLayout.setHorizontalGroup(
                                info1BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, info1BackgroundLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 261, Short.MAX_VALUE)
                                        .addGroup(info1BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(playButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(infoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap())
                        );
                        info1BackgroundLayout.setVerticalGroup(
                                info1BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(info1BackgroundLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(info1BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(info1BackgroundLayout.createSequentialGroup()
                                                        .addGap(5, 5, 5)
                                                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap(180, Short.MAX_VALUE))
                        );

                        infoTabPane.addTab("Info", info1Background);

                        toolbarPanel.setBackground(new java.awt.Color(68, 94, 147));
                        toolbarPanel.setName("toolbar"); // NOI18N

                        logo.setBackground(new java.awt.Color(249, 57, 67));
                        logo.setName("toolbar"); // NOI18N
                        logo.setPreferredSize(new java.awt.Dimension(100, 100));

                        logoLabel.setName(""); // NOI18N

                        javax.swing.GroupLayout logoLayout = new javax.swing.GroupLayout(logo);
                        logo.setLayout(logoLayout);
                        logoLayout.setHorizontalGroup(
                                logoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(logoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        );
                        logoLayout.setVerticalGroup(
                                logoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(logoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        );

                        SearchBar.setForeground(new java.awt.Color(50, 50, 50));
                        SearchBar.setText("Search");
                        SearchBar.setName("textbox"); // NOI18N
                        SearchBar.setPreferredSize(new java.awt.Dimension(476, 22));
                        SearchBar.addFocusListener(new java.awt.event.FocusAdapter() {
                                public void focusGained(java.awt.event.FocusEvent evt) {
                                        SearchBarFocusGained(evt);
                                }
                                public void focusLost(java.awt.event.FocusEvent evt) {
                                        SearchBarFocusLost(evt);
                                }
                        });
                        SearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
                                public void keyPressed(java.awt.event.KeyEvent evt) {
                                        SearchBarKeyPressed(evt);
                                }
                                public void keyReleased(java.awt.event.KeyEvent evt) {
                                        SearchBarKeyReleased(evt);
                                }
                        });

                        settingsButton.setBackground(new java.awt.Color(55, 63, 81));
                        settingsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        settingsButton.setName("button"); // NOI18N
                        settingsButton.setPreferredSize(new java.awt.Dimension(75, 25));
                        settingsButton.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        settingsButtonMouseClicked(evt);
                                }
                                public void mouseEntered(java.awt.event.MouseEvent evt) {
                                        settingsButtonMouseEntered(evt);
                                }
                                public void mouseExited(java.awt.event.MouseEvent evt) {
                                        settingsButtonMouseExited(evt);
                                }
                        });

                        buttonLabel1.setForeground(java.awt.Color.white);
                        buttonLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        buttonLabel1.setText("Settings");
                        buttonLabel1.setName("buttonLabel"); // NOI18N

                        javax.swing.GroupLayout settingsButtonLayout = new javax.swing.GroupLayout(settingsButton);
                        settingsButton.setLayout(settingsButtonLayout);
                        settingsButtonLayout.setHorizontalGroup(
                                settingsButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                        );
                        settingsButtonLayout.setVerticalGroup(
                                settingsButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        );

                        editButton.setBackground(new java.awt.Color(55, 63, 81));
                        editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        editButton.setName("button"); // NOI18N
                        editButton.setPreferredSize(new java.awt.Dimension(75, 25));
                        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        editButtonMouseClicked(evt);
                                }
                                public void mouseEntered(java.awt.event.MouseEvent evt) {
                                        editButtonMouseEntered(evt);
                                }
                                public void mouseExited(java.awt.event.MouseEvent evt) {
                                        editButtonMouseExited(evt);
                                }
                        });

                        buttonLabel2.setForeground(java.awt.Color.white);
                        buttonLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        buttonLabel2.setText("Edit");
                        buttonLabel2.setName("buttonLabel"); // NOI18N

                        javax.swing.GroupLayout editButtonLayout = new javax.swing.GroupLayout(editButton);
                        editButton.setLayout(editButtonLayout);
                        editButtonLayout.setHorizontalGroup(
                                editButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                        );
                        editButtonLayout.setVerticalGroup(
                                editButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        );

                        sortButton.setBackground(new java.awt.Color(55, 63, 81));
                        sortButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        sortButton.setName("button"); // NOI18N
                        sortButton.setPreferredSize(new java.awt.Dimension(75, 25));
                        sortButton.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        sortButtonMouseClicked(evt);
                                }
                                public void mouseEntered(java.awt.event.MouseEvent evt) {
                                        sortButtonMouseEntered(evt);
                                }
                                public void mouseExited(java.awt.event.MouseEvent evt) {
                                        sortButtonMouseExited(evt);
                                }
                        });

                        sortLabel.setForeground(java.awt.Color.white);
                        sortLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        sortLabel.setText("Sort");
                        sortLabel.setName("buttonLabel"); // NOI18N

                        javax.swing.GroupLayout sortButtonLayout = new javax.swing.GroupLayout(sortButton);
                        sortButton.setLayout(sortButtonLayout);
                        sortButtonLayout.setHorizontalGroup(
                                sortButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sortLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                        );
                        sortButtonLayout.setVerticalGroup(
                                sortButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sortLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        );

                        scrapeButton.setBackground(new java.awt.Color(55, 63, 81));
                        scrapeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        scrapeButton.setName("button"); // NOI18N
                        scrapeButton.setPreferredSize(new java.awt.Dimension(75, 25));
                        scrapeButton.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        scrapeButtonMouseClicked(evt);
                                }
                                public void mouseEntered(java.awt.event.MouseEvent evt) {
                                        scrapeButtonMouseEntered(evt);
                                }
                                public void mouseExited(java.awt.event.MouseEvent evt) {
                                        scrapeButtonMouseExited(evt);
                                }
                        });

                        sortLabel1.setForeground(java.awt.Color.white);
                        sortLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        sortLabel1.setText("Scrape");
                        sortLabel1.setName("buttonLabel"); // NOI18N

                        javax.swing.GroupLayout scrapeButtonLayout = new javax.swing.GroupLayout(scrapeButton);
                        scrapeButton.setLayout(scrapeButtonLayout);
                        scrapeButtonLayout.setHorizontalGroup(
                                scrapeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sortLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                        );
                        scrapeButtonLayout.setVerticalGroup(
                                scrapeButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sortLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        );

                        refreshButton.setBackground(new java.awt.Color(55, 63, 81));
                        refreshButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        refreshButton.setName("button"); // NOI18N
                        refreshButton.setPreferredSize(new java.awt.Dimension(75, 25));
                        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        refreshButtonMouseClicked(evt);
                                }
                                public void mouseEntered(java.awt.event.MouseEvent evt) {
                                        refreshButtonMouseEntered(evt);
                                }
                                public void mouseExited(java.awt.event.MouseEvent evt) {
                                        refreshButtonMouseExited(evt);
                                }
                        });

                        refreshLabel.setForeground(java.awt.Color.white);
                        refreshLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        refreshLabel.setText("Refresh");
                        refreshLabel.setName("buttonLabel"); // NOI18N

                        javax.swing.GroupLayout refreshButtonLayout = new javax.swing.GroupLayout(refreshButton);
                        refreshButton.setLayout(refreshButtonLayout);
                        refreshButtonLayout.setHorizontalGroup(
                                refreshButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(refreshLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                        );
                        refreshButtonLayout.setVerticalGroup(
                                refreshButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(refreshLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        );

                        javax.swing.GroupLayout toolbarPanelLayout = new javax.swing.GroupLayout(toolbarPanel);
                        toolbarPanel.setLayout(toolbarPanelLayout);
                        toolbarPanelLayout.setHorizontalGroup(
                                toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(toolbarPanelLayout.createSequentialGroup()
                                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scrapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(55, 55, 55)
                                        .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(48, 48, 48))
                        );
                        toolbarPanelLayout.setVerticalGroup(
                                toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(toolbarPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toolbarPanelLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(scrapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(toolbarPanelLayout.createSequentialGroup()
                                                        .addGap(1, 1, 1)
                                                        .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(36, 36, 36))
                        );

                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                        getContentPane().setLayout(layout);
                        layout.setHorizontalGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(listTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(infoTabPane)
                                        .addContainerGap())
                                .addComponent(toolbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        );
                        layout.setVerticalGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(toolbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(listTabPane)
                                                .addComponent(infoTabPane)))
                        );

                        pack();
                }// </editor-fold>//GEN-END:initComponents

        public void refreshMoviesList() {
                clearInfo();
                try {
                        movies.load();
                } catch (SQLException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                DefaultListModel listModel = new DefaultListModel();

                for (int i = 0; i < movies.getMovies().size(); i++) {
                        listModel.addElement(movies.getMovies().get(i).getTitle());
                }

                moviesList.setModel(listModel);
        }

        public void refreshSorted() {
                clearInfo();
                ArrayList<Movie> sortedList = Utils.Utils.sortTitle(movies.getMovies());

                DefaultListModel listModel = new DefaultListModel();

                for (int i = 0; i < sortedList.size(); i++) {
                        listModel.addElement(sortedList.get(i).getTitle());
                }

                moviesList.setModel(listModel);
        }

        private void moviesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moviesListMouseClicked
                if (evt.getButton() == 1) { //Left Click
                        if (!sorted) {
                                showInfo(moviesList, movies.getMovies());
                        } else {
                                showInfo(moviesList, Utils.Utils.sortTitle(movies.getMovies()));
                        }
                } else if (evt.getButton() == 3) { //Right Click
                }

        }//GEN-LAST:event_moviesListMouseClicked

    private void SearchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyPressed
//            String text = SearchBar.getText();
//            String textToSearch = text.toLowerCase();
//            String[] matches = null;
//
//            JPopupMenu matchesList = new JPopupMenu();
//            matchesList.setFocusable(true);
//            matchesList.setSize(SearchBar.getWidth(), 8000);
//            
//            if (!textToSearch.isBlank() && !textToSearch.isEmpty()) {
//                    matches = containedIn(textToSearch);
//            } else {
//                    return;
//            }
//
//            ActionListener menuListener = (ActionEvent event) -> {
//                    String valueSelected = event.getActionCommand();
//                    System.out.println(">" + valueSelected);
//                    for (int j = 0; j < movies.getMovies().size(); j++) {
//                            if (moviesList.getModel().getElementAt(j).matches(valueSelected)) {
//                                    moviesList.setSelectedIndex(j);
//                                    showInfo(j);
//                                    this.getRootPane().requestFocus(); //Lose focus
//                            }
//                    }
//                    SearchBar.setText("Search");
//                    matchesList.setVisible(false);
//            };
//
//            /*
//            for (int i = 0; i < matches.length; i++) {
//                    System.out.println(i + 1 + ". " + matches[i]);
//            }
//             */
//            //Add matches to popup menu
//            for (int i = 0; i < matches.length; i++) {
//                    JMenuItem item = new JMenuItem(matches[i]);
//                    item.addActionListener(menuListener);
//                    matchesList.add(item);
//            }
//
//            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//                    SearchBar.requestFocus();
//                    SearchBar.setText("Search");
//                    matchesList.setVisible(false);
//
//                    for (int j = 0; j < movies.getMovies().size(); j++) {
//                            if (matches.length < 0) {
//                                    break;
//                            }
//                            if (moviesList.getModel().getElementAt(j).matches(matches[0])) {
//                                    moviesList.setSelectedIndex(j);
//                                    showInfo(j);
//                                    this.getRootPane().requestFocus(); //Lose focus
//                            }
//                    }
//                    return;
//            }
//
//            //Make popup visible
//            matchesList.show(this, 501, 94);
//
//            SearchBar.setText(text);
//            SearchBar.requestFocus();
    }//GEN-LAST:event_SearchBarKeyPressed

//        private String[] containedIn(String s) {
//                ArrayList<String> tempArray = new ArrayList<>();
//                for (int i = 0; i < movies.getMovies().size(); i++) {
//                        if (movies.getMovies().get(i).getTitle().toLowerCase().contains(s.toLowerCase())) {
//                                tempArray.add(movies.getMovies().get(i).getTitle());
//                        }
//                }
//                Object[] objectList = tempArray.toArray();
//                String[] found = new String[objectList.length];
//
//                for (int i = 0; i < found.length; i++) {
//                        found[i] = (String) objectList[i];
//                }
//
//                return found;
//        }

    private void SearchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchBarFocusGained
//            SearchBar.setText("");
    }//GEN-LAST:event_SearchBarFocusGained

    private void SearchBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchBarFocusLost
//            SearchBar.setText("Search");
    }//GEN-LAST:event_SearchBarFocusLost

        private void settingsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMouseClicked
                if (sf != null) {
                        sf.dispose();
                }

                sf = new SettingsFrame(this, ef);

                ImageIcon img = new ImageIcon(System.getProperty("user.dir").replaceAll(Pattern.quote("\\"), "/") + "/assets/gear-solid.png");

                sf.setIconImage(img.getImage());

                sf.setVisible(true);
        }//GEN-LAST:event_settingsButtonMouseClicked

        private void settingsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMouseEntered
                settingsButton.setBackground(theme.getButtonHover());
        }//GEN-LAST:event_settingsButtonMouseEntered

        private void settingsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMouseExited
                settingsButton.setBackground(theme.getButton());
        }//GEN-LAST:event_settingsButtonMouseExited

        private void editButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseClicked
                if (ef != null) {
                        ef.dispose();
                }

                int index = moviesList.getSelectedIndex();
                if (index < 0) {
                        GUIMethods.dialogError("No movie selected for editing");
                        throw new NoMovieSelectedException("No movie selected for editing");
                }

                ef = new EditFrame(this, index);

                ImageIcon img = new ImageIcon(System.getProperty("user.dir").replaceAll(Pattern.quote("\\"), "/") + "/assets/pen-to-square-solid.png");

                ef.setIconImage(img.getImage());

                ef.setVisible(true);
        }//GEN-LAST:event_editButtonMouseClicked

        private void editButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseEntered
                editButton.setBackground(theme.getButtonHover());
        }//GEN-LAST:event_editButtonMouseEntered

        private void editButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseExited
                editButton.setBackground(theme.getButton());
        }//GEN-LAST:event_editButtonMouseExited

        private void sortButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortButtonMouseClicked
                sorted = !sorted;

                if (sorted) {
                        refreshSorted();
                        sortLabel.setText("Unsort");
                } else {
                        refreshMoviesList();
                        sortLabel.setText("Sort");
                }
        }//GEN-LAST:event_sortButtonMouseClicked

        private void sortButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortButtonMouseEntered
                sortButton.setBackground(theme.getButtonHover());
        }//GEN-LAST:event_sortButtonMouseEntered

        private void sortButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortButtonMouseExited
                sortButton.setBackground(theme.getButton());
        }//GEN-LAST:event_sortButtonMouseExited

        private void scrapeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrapeButtonMouseClicked
                JDialog firstDialog = GUIMethods.dialog("Scrape has started", "Please wait", "Scrape");
                
                API api = null;

                clearInfo();

                try {
                        movies.load();
                } catch (SQLException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                        api = new API();
                        api.scrape(movies);
                } catch (IOException | InterruptedException | SQLException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                refreshMoviesList();
                System.gc();
                
                firstDialog.setVisible(false);
                GUIMethods.dialog("Scrape finished", "Information received successfully", "Scrape");
        }//GEN-LAST:event_scrapeButtonMouseClicked

        private void scrapeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrapeButtonMouseEntered
                scrapeButton.setBackground(theme.getButtonHover());
        }//GEN-LAST:event_scrapeButtonMouseEntered

        private void scrapeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrapeButtonMouseExited
                scrapeButton.setBackground(theme.getButton());
        }//GEN-LAST:event_scrapeButtonMouseExited

        private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
                movies.setDir(dir);
                movies.refreshMovies();
                refreshMoviesList();
                System.gc();
        }//GEN-LAST:event_refreshButtonMouseClicked

        private void refreshButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseEntered
                refreshButton.setBackground(theme.getButtonHover());
        }//GEN-LAST:event_refreshButtonMouseEntered

        private void refreshButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseExited
                refreshButton.setBackground(theme.getButton());
        }//GEN-LAST:event_refreshButtonMouseExited

        private void playButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseExited
                playButton.setBackground(theme.getButton());
        }//GEN-LAST:event_playButtonMouseExited

        private void playButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseEntered
                playButton.setBackground(theme.getButtonHover());
        }//GEN-LAST:event_playButtonMouseEntered

        private void playButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseClicked
                if (moviesList.getSelectedIndex() < 0) {
                        throw new NoMovieSelectedException("No movie Selected");
                }

                String MediaPlayerPath = null;
                try {
                        MediaPlayerPath = (String) Database.db().SELECT("Settings", "Media_Player").get(0);
                } catch (SQLException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                System.out.println("\nMedia Player Path: " + MediaPlayerPath);

                String FilePath = movies.getMovies().get(moviesList.getSelectedIndex()).getDirectory();
                if ("".equals(FilePath)) {
                        return;
                }

                System.out.println("File Path: " + FilePath);

                ProcessBuilder pb = new ProcessBuilder(MediaPlayerPath, FilePath);
                try {
                        pb.start();
                        System.out.println("Proccess started");
                } catch (IOException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                System.exit(0); //Για καποιο λογο πρεπει να κλεισει το προγραμμα για να ξεκινήσει ο Player
        }//GEN-LAST:event_playButtonMouseClicked

    private void SearchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyReleased
            System.out.println("(" + SearchBar.getText() + ")");

            ArrayList<String> tempArray = new ArrayList<>();
            JPopupMenu moviesFoundList = new JPopupMenu();

            ActionListener menuListener = (ActionEvent event) -> {
                    String valueSelected = event.getActionCommand();
                    for (int j = 0; j < movies.getMovies().size(); j++) {
                            if (moviesList.getModel().getElementAt(j).matches(valueSelected)) {
                                    moviesList.setSelectedIndex(j);
                                    showInfo(j);
                            }
                    }
            };

            for (int i = 0; i < moviesList.getModel().getSize(); i++) {
                    if (moviesList.getModel().getElementAt(i).toLowerCase().contains(SearchBar.getText().toLowerCase())) {
                            tempArray.add(moviesList.getModel().getElementAt(i));
                            JMenuItem item = new JMenuItem(moviesList.getModel().getElementAt(i));
                            item.addActionListener(menuListener);
                            moviesFoundList.add(item);
                    }
            }

            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    SearchBar.requestFocus();
                    SearchBar.setText("Search");
                    System.out.println("Enter Pressed\nText: " + SearchBar.getText());
                    for (int j = 0; j < movies.getMovies().size(); j++) {
                            if (tempArray.size() < 0) {
                                    break;
                            }
                            if (moviesList.getModel().getElementAt(j).matches(tempArray.get(0))) {
                                    moviesList.setSelectedIndex(j);
                                    showInfo(j);
                                    this.getRootPane().requestFocus(); //Lose focus
                            }
                    }
                    return;
            }

            if (!SearchBar.getText().isBlank() && !SearchBar.getText().isEmpty()) {
                    moviesFoundList.show(this, 496, 95);
            }

            SearchBar.requestFocus();
    }//GEN-LAST:event_SearchBarKeyReleased

        public void showInfo(JList list, ArrayList<Movie> m) {
                int index = list.getSelectedIndex();
                String imdbID = m.get(index).getImdbID();

                if (index < 0) {
                        throw new NoMovieSelectedException("No movie Selected");
                }

                if (imdbID != null) {
                        try {
                                loadImage(ImagesUtils.matchImage(imdbID));
                        } catch (SQLException ex) {
                                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                } else {
                        imageLabel.setIcon(null);
                }

                title.setText(m.get(index).getTitle());
                year.setText(m.get(index).getYear());
                rated.setText(m.get(index).getRated());
                runtime.setText(m.get(index).getRuntime());
                director.setText(m.get(index).getDirector());
                writers.setText(m.get(index).getWriter());
                actors.setText(m.get(index).getActors());
                genre.setText(m.get(index).getGenre());
                language.setText(m.get(index).getLanguage());
                country.setText(m.get(index).getCountry());
                awards.setText(m.get(index).getAwards());
                imdbrating.setText(m.get(index).getImdbRating());
                imdbid.setText(m.get(index).getImdbID());

                printPlot(index);

        }

        public void showInfo(int idloc) {
                if (idloc < 0) {
                        throw new NoMovieSelectedException("No movie Selected");
                }

                loadImage("C:\\Users\\kdesp\\Videos\\g.jpg");

                title.setText(movies.getMovies().get(idloc).getTitle());
                year.setText(movies.getMovies().get(idloc).getYear());
                rated.setText(movies.getMovies().get(idloc).getRated());
                runtime.setText(movies.getMovies().get(idloc).getRuntime());
                director.setText(movies.getMovies().get(idloc).getDirector());
                writers.setText(movies.getMovies().get(idloc).getWriter());
                actors.setText(movies.getMovies().get(idloc).getActors());
                genre.setText(movies.getMovies().get(idloc).getGenre());
                language.setText(movies.getMovies().get(idloc).getLanguage());
                country.setText(movies.getMovies().get(idloc).getCountry());
                awards.setText(movies.getMovies().get(idloc).getAwards());
                imdbrating.setText(movies.getMovies().get(idloc).getImdbRating());
                imdbid.setText(movies.getMovies().get(idloc).getImdbID());

                printPlot(idloc);

        }

        private void printPlot(int idloc) {
                String plotString = movies.getMovies().get(idloc).getPlot();

                if (plotString == null) {
                        plotString = "";
                }

                if (plotString.length() <= 50) {
                        plot.setText(GUIMethods.breakString(plotString, 1));
                } else if (plotString.length() > 50 && plotString.length() <= 100) {
                        plot.setText(GUIMethods.breakString(plotString, 2));
                } else if (plotString.length() > 100) {
                        plot.setText(GUIMethods.breakString(plotString, 3));
                }
        }

        public void loadImage(String dir) {
                ImageIcon imageIcon = new ImageIcon(dir);
                imageLabel.setIcon(imageIcon);
        }

        public static void resizeImage(String imgDir, String imgName, Dimension prefferedImageSize) {
                final String SCALED_IMAGE_NAME = imgName + "_scaled";
                String source = imgDir + imgName + ".jpg";
                System.out.println(source);

                BufferedImage originalImage = null;
                try {
                        originalImage = ImageIO.read(new File(source));
                } catch (IOException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedImage outputImage = GUIMethods.resizeImage(originalImage, prefferedImageSize.width, prefferedImageSize.height);
                try {
                        ImageIO.write(outputImage, "jpg", new File(imgDir + SCALED_IMAGE_NAME + ".jpg"));
                } catch (IOException ex) {
                        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
        }

        private void clearInfo() {
                title.setText("");
                year.setText("");
                rated.setText("");
                runtime.setText("");
                director.setText("");
                writers.setText("");
                actors.setText("");
                genre.setText("");
                language.setText("");
                country.setText("");
                awards.setText("");
                imdbrating.setText("");
                plot.setText("");
                imdbid.setText("");
        }

        public JTabbedPane getInfoTabPane() {
                return infoTabPane;
        }

        /**
         * @param args the command line arguments
         * @throws
         * javax.swing.UnsupportedLookAndFeelException
         * @throws
         * java.lang.ClassNotFoundException
         * @throws
         * java.lang.InstantiationException
         * @throws
         * java.lang.IllegalAccessException
         */
        public static void main(String args[]) throws UnsupportedLookAndFeelException, ClassNotFoundException, InstantiationException, IllegalAccessException {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new Frame().setVisible(true);
                        }
                });

        }

        public void setInfoTabPane(JTabbedPane infoTabPane) {
                this.infoTabPane = infoTabPane;
        }

        public JTabbedPane getListTabPane() {
                return listTabPane;
        }

        public void setListTabPane(JTabbedPane listTabPane) {
                this.listTabPane = listTabPane;
        }

        public JPanel getToolbarPanel() {
                return toolbarPanel;
        }

        public void setToolbarPanel(JPanel toolbarPanel) {
                this.toolbarPanel = toolbarPanel;
        }

        public MovieCollection getMovies() {
                return movies;
        }

        public void setMovies(MovieCollection movies) {
                this.movies = movies;
        }

        public Theme getTheme() {
                return theme;
        }

        public void setTheme(Theme theme) {
                this.theme = theme;
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JScrollPane Movies;
        private javax.swing.JTextField SearchBar;
        private javax.swing.JLabel actors;
        private javax.swing.JLabel actorsIndicator;
        private javax.swing.JLabel awards;
        private javax.swing.JLabel awardsIndicator;
        private javax.swing.JLabel buttonLabel;
        private javax.swing.JLabel buttonLabel1;
        private javax.swing.JLabel buttonLabel2;
        private javax.swing.JLabel country;
        private javax.swing.JLabel countryIndicator;
        private javax.swing.JDialog dialog;
        private javax.swing.JLabel director;
        private javax.swing.JLabel directorIndicator;
        private javax.swing.JPanel editButton;
        private javax.swing.JInternalFrame files;
        private javax.swing.JLabel genre;
        private javax.swing.JLabel genreIndicator;
        private javax.swing.JPanel image;
        private javax.swing.JLabel imageLabel;
        private javax.swing.JLabel imdbid;
        private javax.swing.JLabel imdbidIndicator;
        private javax.swing.JLabel imdbrating;
        private javax.swing.JLabel imdbratingIndicator;
        private javax.swing.JPanel info1Background;
        private javax.swing.JPanel infoPanel;
        private javax.swing.JTabbedPane infoTabPane;
        private javax.swing.JFileChooser jFileChooser1;
        private javax.swing.JLabel language;
        private javax.swing.JLabel languageIndicator;
        private javax.swing.JTabbedPane listTabPane;
        private javax.swing.JPanel logo;
        private javax.swing.JLabel logoLabel;
        private javax.swing.JList<String> moviesList;
        private javax.swing.JPanel playButton;
        private javax.swing.JLabel plot;
        private javax.swing.JLabel plotIndicator;
        private javax.swing.JLabel rated;
        private javax.swing.JLabel ratedIndicator;
        private javax.swing.JPanel refreshButton;
        private javax.swing.JLabel refreshLabel;
        private javax.swing.JLabel runtime;
        private javax.swing.JLabel runtimeIndicator;
        private javax.swing.JPanel scrapeButton;
        private javax.swing.JPanel settingsButton;
        private javax.swing.JPanel sortButton;
        private javax.swing.JLabel sortLabel;
        private javax.swing.JLabel sortLabel1;
        private javax.swing.JLabel title;
        private javax.swing.JLabel titleIndicator;
        private javax.swing.JLabel tmdbLogo;
        private javax.swing.JPanel toolbarPanel;
        private javax.swing.JLabel writers;
        private javax.swing.JLabel writersIndicator;
        private javax.swing.JLabel year;
        private javax.swing.JLabel yearIndicator;
        // End of variables declaration//GEN-END:variables
}
